// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace test
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for SamApi.
    /// </summary>
    public static partial class SamApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static BillingScedule ApiBillingSceduleGet(this ISamApi operations)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiBillingSceduleGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BillingScedule> ApiBillingSceduleGetAsync(this ISamApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBillingSceduleGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static BillingScedule ApiBillingScedulePut(this ISamApi operations, BillingScedule value = default(BillingScedule))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiBillingScedulePutAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BillingScedule> ApiBillingScedulePutAsync(this ISamApi operations, BillingScedule value = default(BillingScedule), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBillingScedulePutWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static BillingScedule ApiBillingScedulePost(this ISamApi operations, BillingScedule value = default(BillingScedule))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiBillingScedulePostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BillingScedule> ApiBillingScedulePostAsync(this ISamApi operations, BillingScedule value = default(BillingScedule), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBillingScedulePostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            public static BillingScedule ApiBillingSceduleBYUQGet(this ISamApi operations, string query = default(string))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiBillingSceduleBYUQGetAsync(query), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BillingScedule> ApiBillingSceduleBYUQGetAsync(this ISamApi operations, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBillingSceduleBYUQGetWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static BillingScedule ApiBillingSceduleByIdGet(this ISamApi operations, string id)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiBillingSceduleByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BillingScedule> ApiBillingSceduleByIdGetAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBillingSceduleByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiBillingSceduleByIdDelete(this ISamApi operations, string id)
            {
                Task.Factory.StartNew(s => ((ISamApi)s).ApiBillingSceduleByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiBillingSceduleByIdDeleteAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiBillingSceduleByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Blobs ApiBlobsGet(this ISamApi operations)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiBlobsGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Blobs> ApiBlobsGetAsync(this ISamApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBlobsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static Blobs ApiBlobsPut(this ISamApi operations, Blobs value = default(Blobs))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiBlobsPutAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Blobs> ApiBlobsPutAsync(this ISamApi operations, Blobs value = default(Blobs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBlobsPutWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static Blobs ApiBlobsPost(this ISamApi operations, Blobs value = default(Blobs))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiBlobsPostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Blobs> ApiBlobsPostAsync(this ISamApi operations, Blobs value = default(Blobs), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBlobsPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            public static Blobs ApiBlobsBYUQGet(this ISamApi operations, string query = default(string))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiBlobsBYUQGetAsync(query), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Blobs> ApiBlobsBYUQGetAsync(this ISamApi operations, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBlobsBYUQGetWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Blobs ApiBlobsByIdGet(this ISamApi operations, string id)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiBlobsByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Blobs> ApiBlobsByIdGetAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBlobsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiBlobsByIdDelete(this ISamApi operations, string id)
            {
                Task.Factory.StartNew(s => ((ISamApi)s).ApiBlobsByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiBlobsByIdDeleteAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiBlobsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Consult ApiConsultGet(this ISamApi operations)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiConsultGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Consult> ApiConsultGetAsync(this ISamApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiConsultGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static Consult ApiConsultPut(this ISamApi operations, Consult value = default(Consult))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiConsultPutAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Consult> ApiConsultPutAsync(this ISamApi operations, Consult value = default(Consult), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiConsultPutWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static Consult ApiConsultPost(this ISamApi operations, Consult value = default(Consult))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiConsultPostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Consult> ApiConsultPostAsync(this ISamApi operations, Consult value = default(Consult), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiConsultPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            public static Consult ApiConsultBYUQGet(this ISamApi operations, string query = default(string))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiConsultBYUQGetAsync(query), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Consult> ApiConsultBYUQGetAsync(this ISamApi operations, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiConsultBYUQGetWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Consult ApiConsultByIdGet(this ISamApi operations, string id)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiConsultByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Consult> ApiConsultByIdGetAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiConsultByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiConsultByIdDelete(this ISamApi operations, string id)
            {
                Task.Factory.StartNew(s => ((ISamApi)s).ApiConsultByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiConsultByIdDeleteAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiConsultByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Doctor ApiDoctorGet(this ISamApi operations)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiDoctorGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Doctor> ApiDoctorGetAsync(this ISamApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiDoctorGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static Doctor ApiDoctorPut(this ISamApi operations, Doctor value = default(Doctor))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiDoctorPutAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Doctor> ApiDoctorPutAsync(this ISamApi operations, Doctor value = default(Doctor), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiDoctorPutWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static Doctor ApiDoctorPost(this ISamApi operations, Doctor value = default(Doctor))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiDoctorPostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Doctor> ApiDoctorPostAsync(this ISamApi operations, Doctor value = default(Doctor), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiDoctorPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            public static Doctor ApiDoctorBYUQGet(this ISamApi operations, string query = default(string))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiDoctorBYUQGetAsync(query), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Doctor> ApiDoctorBYUQGetAsync(this ISamApi operations, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiDoctorBYUQGetWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Doctor ApiDoctorByIdGet(this ISamApi operations, string id)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiDoctorByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Doctor> ApiDoctorByIdGetAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiDoctorByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiDoctorByIdDelete(this ISamApi operations, string id)
            {
                Task.Factory.StartNew(s => ((ISamApi)s).ApiDoctorByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiDoctorByIdDeleteAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiDoctorByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MedicalArtifact ApiMedicalArtifactGet(this ISamApi operations)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiMedicalArtifactGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MedicalArtifact> ApiMedicalArtifactGetAsync(this ISamApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMedicalArtifactGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static MedicalArtifact ApiMedicalArtifactPut(this ISamApi operations, MedicalArtifact value = default(MedicalArtifact))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiMedicalArtifactPutAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MedicalArtifact> ApiMedicalArtifactPutAsync(this ISamApi operations, MedicalArtifact value = default(MedicalArtifact), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMedicalArtifactPutWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static MedicalArtifact ApiMedicalArtifactPost(this ISamApi operations, MedicalArtifact value = default(MedicalArtifact))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiMedicalArtifactPostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MedicalArtifact> ApiMedicalArtifactPostAsync(this ISamApi operations, MedicalArtifact value = default(MedicalArtifact), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMedicalArtifactPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            public static MedicalArtifact ApiMedicalArtifactBYUQGet(this ISamApi operations, string query = default(string))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiMedicalArtifactBYUQGetAsync(query), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MedicalArtifact> ApiMedicalArtifactBYUQGetAsync(this ISamApi operations, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMedicalArtifactBYUQGetWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static MedicalArtifact ApiMedicalArtifactByIdGet(this ISamApi operations, string id)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiMedicalArtifactByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MedicalArtifact> ApiMedicalArtifactByIdGetAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMedicalArtifactByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiMedicalArtifactByIdDelete(this ISamApi operations, string id)
            {
                Task.Factory.StartNew(s => ((ISamApi)s).ApiMedicalArtifactByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMedicalArtifactByIdDeleteAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiMedicalArtifactByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MedicalArtifactType ApiMedicalArtifactTypeGet(this ISamApi operations)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiMedicalArtifactTypeGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MedicalArtifactType> ApiMedicalArtifactTypeGetAsync(this ISamApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMedicalArtifactTypeGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static MedicalArtifactType ApiMedicalArtifactTypePut(this ISamApi operations, MedicalArtifactType value = default(MedicalArtifactType))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiMedicalArtifactTypePutAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MedicalArtifactType> ApiMedicalArtifactTypePutAsync(this ISamApi operations, MedicalArtifactType value = default(MedicalArtifactType), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMedicalArtifactTypePutWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static MedicalArtifactType ApiMedicalArtifactTypePost(this ISamApi operations, MedicalArtifactType value = default(MedicalArtifactType))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiMedicalArtifactTypePostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MedicalArtifactType> ApiMedicalArtifactTypePostAsync(this ISamApi operations, MedicalArtifactType value = default(MedicalArtifactType), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMedicalArtifactTypePostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            public static MedicalArtifactType ApiMedicalArtifactTypeBYUQGet(this ISamApi operations, string query = default(string))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiMedicalArtifactTypeBYUQGetAsync(query), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MedicalArtifactType> ApiMedicalArtifactTypeBYUQGetAsync(this ISamApi operations, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMedicalArtifactTypeBYUQGetWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static MedicalArtifactType ApiMedicalArtifactTypeByIdGet(this ISamApi operations, string id)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiMedicalArtifactTypeByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MedicalArtifactType> ApiMedicalArtifactTypeByIdGetAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMedicalArtifactTypeByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiMedicalArtifactTypeByIdDelete(this ISamApi operations, string id)
            {
                Task.Factory.StartNew(s => ((ISamApi)s).ApiMedicalArtifactTypeByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMedicalArtifactTypeByIdDeleteAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiMedicalArtifactTypeByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static OperationDetails ApiOperationDetailsGet(this ISamApi operations)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiOperationDetailsGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationDetails> ApiOperationDetailsGetAsync(this ISamApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOperationDetailsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static OperationDetails ApiOperationDetailsPut(this ISamApi operations, OperationDetails value = default(OperationDetails))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiOperationDetailsPutAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationDetails> ApiOperationDetailsPutAsync(this ISamApi operations, OperationDetails value = default(OperationDetails), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOperationDetailsPutWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static OperationDetails ApiOperationDetailsPost(this ISamApi operations, OperationDetails value = default(OperationDetails))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiOperationDetailsPostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationDetails> ApiOperationDetailsPostAsync(this ISamApi operations, OperationDetails value = default(OperationDetails), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOperationDetailsPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            public static OperationDetails ApiOperationDetailsBYUQGet(this ISamApi operations, string query = default(string))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiOperationDetailsBYUQGetAsync(query), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationDetails> ApiOperationDetailsBYUQGetAsync(this ISamApi operations, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOperationDetailsBYUQGetWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static OperationDetails ApiOperationDetailsByIdGet(this ISamApi operations, string id)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiOperationDetailsByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationDetails> ApiOperationDetailsByIdGetAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOperationDetailsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiOperationDetailsByIdDelete(this ISamApi operations, string id)
            {
                Task.Factory.StartNew(s => ((ISamApi)s).ApiOperationDetailsByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiOperationDetailsByIdDeleteAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiOperationDetailsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IEnumerable<Patient> ApiPatientGet(this ISamApi operations)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<Patient>> ApiPatientGetAsync(this ISamApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPatientGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static Patient ApiPatientPut(this ISamApi operations, Patient value = default(Patient))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientPutAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Patient> ApiPatientPutAsync(this ISamApi operations, Patient value = default(Patient), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPatientPutWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static Patient ApiPatientPost(this ISamApi operations, Patient value = default(Patient))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientPostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Patient> ApiPatientPostAsync(this ISamApi operations, Patient value = default(Patient), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPatientPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            public static Patient ApiPatientBYUQGet(this ISamApi operations, string query = default(string))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientBYUQGetAsync(query), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Patient> ApiPatientBYUQGetAsync(this ISamApi operations, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPatientBYUQGetWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Patient ApiPatientByIdGet(this ISamApi operations, string id)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Patient> ApiPatientByIdGetAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPatientByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiPatientByIdDelete(this ISamApi operations, string id)
            {
                Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPatientByIdDeleteAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiPatientByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PatientEvent ApiPatientEventGet(this ISamApi operations)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientEventGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PatientEvent> ApiPatientEventGetAsync(this ISamApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPatientEventGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static PatientEvent ApiPatientEventPut(this ISamApi operations, PatientEvent value = default(PatientEvent))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientEventPutAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PatientEvent> ApiPatientEventPutAsync(this ISamApi operations, PatientEvent value = default(PatientEvent), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPatientEventPutWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static PatientEvent ApiPatientEventPost(this ISamApi operations, PatientEvent value = default(PatientEvent))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientEventPostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PatientEvent> ApiPatientEventPostAsync(this ISamApi operations, PatientEvent value = default(PatientEvent), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPatientEventPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            public static PatientEvent ApiPatientEventBYUQGet(this ISamApi operations, string query = default(string))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientEventBYUQGetAsync(query), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PatientEvent> ApiPatientEventBYUQGetAsync(this ISamApi operations, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPatientEventBYUQGetWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static PatientEvent ApiPatientEventByIdGet(this ISamApi operations, string id)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientEventByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PatientEvent> ApiPatientEventByIdGetAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPatientEventByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiPatientEventByIdDelete(this ISamApi operations, string id)
            {
                Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientEventByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPatientEventByIdDeleteAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiPatientEventByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PatientReferal ApiPatientReferalGet(this ISamApi operations)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientReferalGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PatientReferal> ApiPatientReferalGetAsync(this ISamApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPatientReferalGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static PatientReferal ApiPatientReferalPut(this ISamApi operations, PatientReferal value = default(PatientReferal))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientReferalPutAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PatientReferal> ApiPatientReferalPutAsync(this ISamApi operations, PatientReferal value = default(PatientReferal), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPatientReferalPutWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static PatientReferal ApiPatientReferalPost(this ISamApi operations, PatientReferal value = default(PatientReferal))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientReferalPostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PatientReferal> ApiPatientReferalPostAsync(this ISamApi operations, PatientReferal value = default(PatientReferal), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPatientReferalPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            public static PatientReferal ApiPatientReferalBYUQGet(this ISamApi operations, string query = default(string))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientReferalBYUQGetAsync(query), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PatientReferal> ApiPatientReferalBYUQGetAsync(this ISamApi operations, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPatientReferalBYUQGetWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static PatientReferal ApiPatientReferalByIdGet(this ISamApi operations, string id)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientReferalByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PatientReferal> ApiPatientReferalByIdGetAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPatientReferalByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiPatientReferalByIdDelete(this ISamApi operations, string id)
            {
                Task.Factory.StartNew(s => ((ISamApi)s).ApiPatientReferalByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPatientReferalByIdDeleteAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiPatientReferalByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PersonalAssistant ApiPersonalAssistantGet(this ISamApi operations)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPersonalAssistantGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonalAssistant> ApiPersonalAssistantGetAsync(this ISamApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPersonalAssistantGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static PersonalAssistant ApiPersonalAssistantPut(this ISamApi operations, PersonalAssistant value = default(PersonalAssistant))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPersonalAssistantPutAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonalAssistant> ApiPersonalAssistantPutAsync(this ISamApi operations, PersonalAssistant value = default(PersonalAssistant), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPersonalAssistantPutWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static PersonalAssistant ApiPersonalAssistantPost(this ISamApi operations, PersonalAssistant value = default(PersonalAssistant))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPersonalAssistantPostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonalAssistant> ApiPersonalAssistantPostAsync(this ISamApi operations, PersonalAssistant value = default(PersonalAssistant), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPersonalAssistantPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            public static PersonalAssistant ApiPersonalAssistantBYUQGet(this ISamApi operations, string query = default(string))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPersonalAssistantBYUQGetAsync(query), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonalAssistant> ApiPersonalAssistantBYUQGetAsync(this ISamApi operations, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPersonalAssistantBYUQGetWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static PersonalAssistant ApiPersonalAssistantByIdGet(this ISamApi operations, string id)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiPersonalAssistantByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonalAssistant> ApiPersonalAssistantByIdGetAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPersonalAssistantByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiPersonalAssistantByIdDelete(this ISamApi operations, string id)
            {
                Task.Factory.StartNew(s => ((ISamApi)s).ApiPersonalAssistantByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPersonalAssistantByIdDeleteAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiPersonalAssistantByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ProcedureCode ApiProcedureCodeGet(this ISamApi operations)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiProcedureCodeGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcedureCode> ApiProcedureCodeGetAsync(this ISamApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiProcedureCodeGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static ProcedureCode ApiProcedureCodePut(this ISamApi operations, ProcedureCode value = default(ProcedureCode))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiProcedureCodePutAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcedureCode> ApiProcedureCodePutAsync(this ISamApi operations, ProcedureCode value = default(ProcedureCode), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiProcedureCodePutWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static ProcedureCode ApiProcedureCodePost(this ISamApi operations, ProcedureCode value = default(ProcedureCode))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiProcedureCodePostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcedureCode> ApiProcedureCodePostAsync(this ISamApi operations, ProcedureCode value = default(ProcedureCode), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiProcedureCodePostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            public static ProcedureCode ApiProcedureCodeBYUQGet(this ISamApi operations, string query = default(string))
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiProcedureCodeBYUQGetAsync(query), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcedureCode> ApiProcedureCodeBYUQGetAsync(this ISamApi operations, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiProcedureCodeBYUQGetWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ProcedureCode ApiProcedureCodeByIdGet(this ISamApi operations, string id)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiProcedureCodeByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcedureCode> ApiProcedureCodeByIdGetAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiProcedureCodeByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiProcedureCodeByIdDelete(this ISamApi operations, string id)
            {
                Task.Factory.StartNew(s => ((ISamApi)s).ApiProcedureCodeByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiProcedureCodeByIdDeleteAsync(this ISamApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiProcedureCodeByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<EntityObject> ApiSampleDataGet(this ISamApi operations)
            {
                return Task.Factory.StartNew(s => ((ISamApi)s).ApiSampleDataGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EntityObject>> ApiSampleDataGetAsync(this ISamApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiSampleDataGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiSampleDataPost(this ISamApi operations, string value = default(string))
            {
                Task.Factory.StartNew(s => ((ISamApi)s).ApiSampleDataPostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiSampleDataPostAsync(this ISamApi operations, string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiSampleDataPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
